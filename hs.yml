---
- name: Install Docker
  hosts: all
  become: true
  tasks:
    - name: Install apt-transport-https
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - lsb-release
          - gnupg
        state: latest
        update_cache: true

    - name: Add signing key
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present

    - name: Add repository into sources list
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install Docker
      ansible.builtin.apt:
        name:
          - docker
          - docker.io
          - docker-compose
          - docker-registry
        state: latest
        update_cache: true

- name: Install Caddy
  hosts: all
  become: true
  tasks:
    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - debian-keyring
          - debian-archive-keyring
          - apt-transport-https
        state: latest
        update_cache: true

    - name: Add signing key
      ansible.builtin.apt_key:
        url: "https://dl.cloudsmith.io/public/caddy/stable/gpg.key"

    - name: Add repository into sources list
      ansible.builtin.apt_repository:
        repo: deb https://dl.cloudsmith.io/public/caddy/stable/deb/debian {{ ansible_distribution_release }} main
        filename: caddy

    - name: Install Caddy
      ansible.builtin.apt:
        name: caddy
        state: latest
        update_cache: true

    - name: Copy custom Caddyfile
      template:
        src: caddy/Caddyfile
        dest: /etc/caddy/

    - name: Restart Caddy
      service:
        name: caddy
        state: restarted

- name: Install Homer
  hosts: all
  become: true
  tasks:
    - name: Create Docker container
      community.docker.docker_container:
        name: homer
        image: b4bz/homer
        ports: 8080:8080
        volumes: homer:/www/assets
        restart_policy: unless-stopped

    - name: Copy custom config.yml
      template:
        src: homer/config.yml
        dest: /var/lib/docker/volumes/homer/_data/

    - name: Copy icons
      copy:
        src: "{{ item }}"
        dest: /var/lib/docker/volumes/homer/_data/tools/
      with_fileglob: homer/*.png

- name: Install Pi-hole
  hosts: all
  become: true
  tasks:
    - name: create Docker container
      community.docker.docker_container:
        name: pihole
        image: pihole/pihole
        ports:
          - 53:53/tcp
          - 53:53/udp
          - 81:80
        env:
          TZ: "America/New_York"
        volumes:
          - pihole:/etc/pihole
          - dnsmasq.d:/etc/dnsmasq.d
        restart_policy: unless-stopped

- name: Install Syncthing
  hosts: all
  become: true
  tasks:
    - name: Add signing key
      ansible.builtin.apt_key:
        url: "https://syncthing.net/release-key.gpg"
        state: present

    - name: Add repository to sources list
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/syncthing-archive-keyring.gpg] "https://apt.syncthing.net/" syncthing stable
        filename: syncthing

    - name: Install Syncthing
      ansible.builtin.apt:
        name: syncthing
        state: latest
        update_cache: true

    - name: Start and enable Syncthing
      service:
        name: syncthing@syncthing
        state: started
        enabled: yes

- name: Install Jellyfin
  hosts: all
  become: true
  tasks:
    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - gnupg
          - lsb-release
        state: latest
        update_cache: true

    - name: Add signing key
      apt_key:
        url: "https://repo.jellyfin.org/debian/jellyfin_team.gpg.key"
        keyring: /etc/apt/trusted.gpg.d/debian-jellyfin.gpg

    - name: Add repository to sources list
      apt_repository:
        repo: deb [arch={{ ansible_architecture }}] "https://repo.jellyfin.org/{{ ansible_distribution | lower }}" {{ ansible_distribution_release }} main
        filename: jellyfin

    - name: Install Jellyfin
      apt:
        name: jellyfin
        state: latest

    - name: Start and enable Jellyfin
      service:
        name: jellyfin
        state: started
        enabled: yes

- name: Install Nextcloud
  hosts: all
  become: true
  tasks:
    - name: Create donker network
      docker_network:
        name: donker

    - name: Create MariaDB Docker container
      community.docker.docker_container:
        name: nextcloud_mariadb
        image: mariadb:10.5
        networks:
          - name: donker
        volumes: nextcloud_mariadb:/var/lib/mysql
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_PASSWORD: "{{ mysql_password }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
        restart_policy: unless-stopped

    - name: Create Nextcloud Docker container
      community.docker.docker_container:
        name: nextcloud
        image: nextcloud
        networks:
          - name: bridge
          - name: donker
        ports: 8081:80
        volumes: nextcloud:/var/www/html
        env:
          MYSQL_PASSWORD: "{{ mysql_password }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          MYSQL_HOST: nextcloud_mariadb
        restart_policy: unless-stopped

    - name: add url to list of trusted domains
      lineinfile:
        path: /var/lib/docker/volumes/nextcloud/_data/config/config.php
        insertafter: "^    0 => '1"
        line: "    1 => 'next.{{ url }}',"
